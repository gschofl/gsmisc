export("%.%")
export("%@%")
export("%has_tables%")
export("%ni%")
export("%|%")
export("%|na|%")
export("%|null|%")
export("%||%")
export(":=")
export("shared<-")
export(Curry)
export(Match)
export(SysCall)
export(all_empty)
export(all_scalar)
export(are_empty)
export(are_false)
export(are_null)
export(are_scalar)
export(are_true)
export(benchmark)
export(blanks)
export(check_timestamp)
export(collectionConstructor)
export(collectionShower)
export(collectionValidator)
export(compact)
export(compactAll)
export(compactNA)
export(compose)
export(count_re)
export(db_bulk_insert)
export(db_connect)
export(db_count)
export(db_create)
export(db_disconnect)
export(db_query)
export(dup)
export(exists_re)
export(flatten)
export(has_command)
export(has_tables)
export(install_packages)
export(is.empty)
export(is.scalar)
export(linebreak)
export(merge_dups)
export(merge_list)
export(modify_list)
export(nunique)
export(pad)
export(purgeNA)
export(replace_ext)
export(require.all)
export(shared)
export(split_path)
export(strip_ext)
export(strmatch)
export(strsplitN)
export(trim)
export(update_github)
export(update_packages)
export(usp)
export(wrap)
export(xattr)
export(xname)
export(xset)
export(xsize)
export(xvalue)
exportClasses(Collection)
exportMethods("[")
exportMethods("[[")
exportMethods(as.list)
exportMethods(elementType)
importFrom(BiocInstaller,biocLite)
importFrom(BiocInstaller,biocValid)
importFrom(IRanges,as.list)
importFrom(IRanges,elementType)
importFrom(RCurl,basicTextGatherer)
importFrom(RCurl,curlPerform)
importFrom(RSQLite,SQLite)
importFrom(RSQLite,dbBeginTransaction)
importFrom(RSQLite,dbCommit)
importFrom(RSQLite,dbConnect)
importFrom(RSQLite,dbDisconnect)
importFrom(RSQLite,dbGetInfo)
importFrom(RSQLite,dbGetQuery)
importFrom(RSQLite,dbListTables)
importFrom(RSQLite,dbSendPreparedQuery)
importFrom(XML,xmlGetAttr)
importFrom(XML,xmlName)
importFrom(XML,xmlValue)
importFrom(XML,xpathApply)
importFrom(assertthat,"on_failure<-")
importFrom(assertthat,assert_that)
importFrom(assertthat,has_args)
importFrom(assertthat,is.readable)
importFrom(assertthat,is.string)
importFrom(assertthat,noNA)
importFrom(assertthat,not_empty)
importFrom(assertthat,on_failure)
